//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""ActionMap1"",
            ""id"": ""5267a0cc-5196-4b1b-8b32-96f50254dfad"",
            ""actions"": [
                {
                    ""name"": ""MoveArms"",
                    ""type"": ""Value"",
                    ""id"": ""82f37298-1427-409f-9997-86f63841e369"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeanBody"",
                    ""type"": ""Value"",
                    ""id"": ""4f1d5a79-e021-4763-ae33-d5764df3bb51"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ResetSkiier"",
                    ""type"": ""Button"",
                    ""id"": ""61d22bc3-76b9-4e7c-a7ea-b3f3ab973337"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7f621100-ea02-4468-abb7-deb25926911d"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""ControlScheme1"",
                    ""action"": ""MoveArms"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d1521de4-783c-4816-b2f3-83a3aaff749b"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""ControlScheme1"",
                    ""action"": ""LeanBody"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""189073b8-eb6a-4c59-9638-98b49ca59243"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""ControlScheme1"",
                    ""action"": ""ResetSkiier"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""ControlScheme1"",
            ""bindingGroup"": ""ControlScheme1"",
            ""devices"": []
        }
    ]
}");
        // ActionMap1
        m_ActionMap1 = asset.FindActionMap("ActionMap1", throwIfNotFound: true);
        m_ActionMap1_MoveArms = m_ActionMap1.FindAction("MoveArms", throwIfNotFound: true);
        m_ActionMap1_LeanBody = m_ActionMap1.FindAction("LeanBody", throwIfNotFound: true);
        m_ActionMap1_ResetSkiier = m_ActionMap1.FindAction("ResetSkiier", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // ActionMap1
    private readonly InputActionMap m_ActionMap1;
    private IActionMap1Actions m_ActionMap1ActionsCallbackInterface;
    private readonly InputAction m_ActionMap1_MoveArms;
    private readonly InputAction m_ActionMap1_LeanBody;
    private readonly InputAction m_ActionMap1_ResetSkiier;
    public struct ActionMap1Actions
    {
        private @InputActions m_Wrapper;
        public ActionMap1Actions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveArms => m_Wrapper.m_ActionMap1_MoveArms;
        public InputAction @LeanBody => m_Wrapper.m_ActionMap1_LeanBody;
        public InputAction @ResetSkiier => m_Wrapper.m_ActionMap1_ResetSkiier;
        public InputActionMap Get() { return m_Wrapper.m_ActionMap1; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ActionMap1Actions set) { return set.Get(); }
        public void SetCallbacks(IActionMap1Actions instance)
        {
            if (m_Wrapper.m_ActionMap1ActionsCallbackInterface != null)
            {
                @MoveArms.started -= m_Wrapper.m_ActionMap1ActionsCallbackInterface.OnMoveArms;
                @MoveArms.performed -= m_Wrapper.m_ActionMap1ActionsCallbackInterface.OnMoveArms;
                @MoveArms.canceled -= m_Wrapper.m_ActionMap1ActionsCallbackInterface.OnMoveArms;
                @LeanBody.started -= m_Wrapper.m_ActionMap1ActionsCallbackInterface.OnLeanBody;
                @LeanBody.performed -= m_Wrapper.m_ActionMap1ActionsCallbackInterface.OnLeanBody;
                @LeanBody.canceled -= m_Wrapper.m_ActionMap1ActionsCallbackInterface.OnLeanBody;
                @ResetSkiier.started -= m_Wrapper.m_ActionMap1ActionsCallbackInterface.OnResetSkiier;
                @ResetSkiier.performed -= m_Wrapper.m_ActionMap1ActionsCallbackInterface.OnResetSkiier;
                @ResetSkiier.canceled -= m_Wrapper.m_ActionMap1ActionsCallbackInterface.OnResetSkiier;
            }
            m_Wrapper.m_ActionMap1ActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MoveArms.started += instance.OnMoveArms;
                @MoveArms.performed += instance.OnMoveArms;
                @MoveArms.canceled += instance.OnMoveArms;
                @LeanBody.started += instance.OnLeanBody;
                @LeanBody.performed += instance.OnLeanBody;
                @LeanBody.canceled += instance.OnLeanBody;
                @ResetSkiier.started += instance.OnResetSkiier;
                @ResetSkiier.performed += instance.OnResetSkiier;
                @ResetSkiier.canceled += instance.OnResetSkiier;
            }
        }
    }
    public ActionMap1Actions @ActionMap1 => new ActionMap1Actions(this);
    private int m_ControlScheme1SchemeIndex = -1;
    public InputControlScheme ControlScheme1Scheme
    {
        get
        {
            if (m_ControlScheme1SchemeIndex == -1) m_ControlScheme1SchemeIndex = asset.FindControlSchemeIndex("ControlScheme1");
            return asset.controlSchemes[m_ControlScheme1SchemeIndex];
        }
    }
    public interface IActionMap1Actions
    {
        void OnMoveArms(InputAction.CallbackContext context);
        void OnLeanBody(InputAction.CallbackContext context);
        void OnResetSkiier(InputAction.CallbackContext context);
    }
}
